We have two fonts, font A and font B
We want to make a superset of both fonts
Characters from font B will override those from font A

Steps for TrueType:
- scale either of the fonts so their unitsPerEm matches
- remove instructions from both fonts
- remove the intersection of the glyphsets of A and B from A
- remove the OT features belonging to the removed glyphs
- add the glyphs from font B to font A
- add the OT features from B to A
- (autohint the resulting font)

Symbolically, first remove the overlap between A and B, then add A to B
A = A - B  # make subset first
A = A + B  # then make the superset

The easiest way to do all this (and with the least amount of data loss) is to
manipulate FontTools objects directly. The following procedures assume that
way of working.

How to scale a TrueType font
- remove all instructions
    - Unless a way can be found to scale cvt values and instructions, but
      I'm assuming a general solution is very hard or even impossible
    - And then still, how to merge the instructions from two fonts into one?
      That seems to me an equally difficult problem to solve.
- scale all coordinates
- scale all component transformations
- scale all glyph metrics
- scale all font metrics
- scale GPOS/GDEF/BASE/JSTF

How to make a subset (definitely of font A, but possibly also font B)
- we start with a list of unicode code points to be removed
- make a list of unicodes that will *stay*
- find all glyphs that belong to that subset:
  1. find the directly used glyphs through the cmap
  2. find indirectly used glyphs through the GSUB
  3. find the component glyphs that are used by the glyphs from steps 1 and 2
  4. all glyphs *not* found by steps 1-3 can be removed
- remove glyphs from glyf table
- remove glyphs from various metrics tables
- subset GDEF/GPOS/GSUB/BASE/JSTF
- remove glyphs from other tables
- remove unsupported tables that reference glyphs
- notes:
  - maintain the glyph order of the remaining glyphs

How to make a superset
- now assuming none of the characters/glyphs defined by B are in A
- open both fonts using a glyphname scheme that forces unique glyphnames, by using a
  unique glyph name suffix or prefix per font (ttfTools.patchGlyphNames() does that)
- merge glyf tables
- merge various metrics tables
- merge GDEF/GPOS/GSUB/BASE/JSTF tables
- merge various OS/2 info (eg. unicode coverage)

=================================================================
Tools needed (all should initially work on FontTools TTFont):

- Strip TTF Instructions
- Scale TTF
- Analyzing tools:
  - FindGlyphs: find the set of glyphs needed to render a certain unicode range (or arbitrary unicode set?)
  - OTFReport: report selected TTF/OTF info, like unitsPerEm, numGlyphs, availability of tables, features
- Subset OTL (only subset the OT Layout tables)
- Subset TTF
- Merge TTF
- AutohintTTF (http://www.freetype.org/ttfautohint/)
- Validator?

Tool assumptions:
- initially we'll work with TTF outlines, CFF/OTF can come later
- when dealing with characters/unicode, we'll only work with cmap 3,1

Todo:
- write a brief description of each tool with an estimate on how much effort it is to complete.
- write more formal specifications for each tool
- which ttf tables do we need to support minimally? Ideally?

=================================================================
More notes
- 'kern' table support?
- kerning across subsets to be merged? Eg. when merging smallcaps into "normal"
  (that's probably not a realistic requirement for the scenario we're building this for)
- Does google make non-latin fonts? Yes: Check Noto Sans CJK. How do they make it? FDK?

=================================================================
OTF/CFF
- for most operations it's probably the best to first flatten all charstrings (get rid of
  subr calls, except maybe some special/standard ones for hinting)
- Merging OTFs while maintaining original hints can (theoretically) be done by using FDSelect

=================================================================
TOOLS TO BUILD (those marked with *** have been implemented under tnbits.compilers.f5)

Strip TTF Instructions *** f5.ttfTools.stripInstructions(font)
- remove cvt, prep and fpgm tables
- for glyph in font["glyf"]: deleteInstructions(glyph)

Scale TTF/OTF *** f5.ttfTools.scaleFont(font, desiredUnitsPerEm)  # TTF-only
- Generic:
  - scale horizontal font metrics
  - scale vertical font metrics
  - scale horizontal glyph metrics
  - scale vertical glyph metrics
  - scale GPOS values
  - scale kern values (if we support the 'kern' table)
- TTF:
  - assert instructions have been stripped
  - scale glyph coordinates
  - scale component origins (check Apple vs. non-Apple component transformation)
  - scale bounding boxes (in case they shouldn't be recalculated)
- OTF/CFF:
  - assert flattened charstrings
  - scale charstrings + stem things (needs research)
  - scale bluezones etc.
  - resubr charstrings (or: separate tool)

FindGlyphs *** f5.ttfTools.findGlyphsByUnicode(font, unicodes)
- input: which *characters* to keep (unicode values)
- find the glyphs that are directly needed for that character set trough cmap 3,10 or 3,1 or 0,3;
  these are the encodedGlyphs
- through GSUB, find out which alternate glyphs exist of encodedGlyphs;
  these are the alternateGlyphs
- find which glyphs are used as components by (encodedGlyphs + alternateGlyphs);
  these are the componentGlyphs
  glyphsToKeep = encodedGlyphs + alternateGlyphs + componentGlyphs
- glyphsToDelete = allGlyphs - glyphsToKeep

Subset TTF/OTF *** f5.ttfTools.subsetFont(font, glyphsToDelete)
- input: glyphsToDelete
- Generic:
  - subset OTL (this is a separate tool: f5.otlTools.deleteGlyphs(...))
  - adjust unicodeRanges in OS/2 etc.
  - subset generic metrics tables (need to see which are common between OTF and TTF)
- TTF:
  - subset 'glyf' table
  - subset TTF metrics tables
  - subset post table, if it contains the glyph names
- OTF:
  - assert flattened charstrings
  - subset CharStrings
  - make sure glyph order/glyph name strings are adjusted

Subset OTL (subset the OpenType Layout tables) *** f5.otlTools.deleteGlyphs(font, tableTag, glyphNames)  # only for GPOS and GSUB, not yet for GDEF, BASE and JSFT
- input: glyphsToDelete
- subset GDEF
- subset BASE
- remove all glyphsToDelete references from GPOS and GSUB lookups
- find which lookups are now defunct or empty
- assert those lookups are no longer referenced by other lookups (or remove those references)
- remove dead lookup references from features
- remove dead features from scripts
- remove dead scripts from table
- remove dead lookups from lookup list, and remap all references with new indices

Flatten CharStrings (only needed when building support for OTF/CFF)
- "unsubroutine" all CharStrings, getting rid of all subrs (except probably those
  to do with hinting)

Merge TTF *** f5.ttfTools.mergeFonts(font1, font2)  # TTF-only
- (for simplicity, I'm talking about merging two fonts, A and B, but the principles
  should apply to any amount)
- assert instructions have been stripped from font A and B
- assert A.charset & B.charset == empty (bar .notdef and space etc.)
- assert that there are no orphan glyphs (unreferencable in any way except by
  glyphName/glyphID) in either font
- open both fonts with a glyphname hack that A.glyphNames & B.glyphNames == empty
- A.glyphOrder += B.glyphOrder
- merge all glyphs from B into A's glyf table
- merge all glyph metrics from B into A
- merge OTL tables
- (merge 'kern' tables)
- fix up OS/2 things like unicodeRanges etc.
- (for OTF the glyph name stuff will have to be different, CharStrings need to be flattened, etc.)

AutohintTTF:
- Use FreeType's ttfautohint, provide a Python-friendly wrapper (if at all needed)

Validator:
- check certain consistencies. OS/2 values, name table entries? Let's make a list of possible
  things to check.
- check TTF glyph bounding boxes (apparently in some CJK fonts the glyph.bbox does *not* match
  the actual bbox on purpose. I forgot the reasons. Maybe this is no longer true.

OTF -> TTF converter *** f5.ttfTools.convertFontToTTF()
- create 'glyf' table
- create dummy 'loca' table
- convert all CFF glyphs to glyf format (f5.ttGlyphBuilder)
- set maxp tableVersion to 0x00010000
- set up 'post' table if glyph names need to be maintained (if it's not a CID-keyed font)
- delete 'CFF ' table
