# -*- coding: UTF-8 -*-
# -----------------------------------------------------------------------------
#     Copyright (c) 2014+ Type Network
#
#     T N  B I T S
#     No distribution without permission.
#
# -----------------------------------------------------------------------------
#
#     ttfautohint.py
#


import os
from tnbits.constants import Constants
from tnbits.toolbox.transformer import TX
from tnbits.hinting.autohint.autohintbase import AutohintBase

DEBUG = False

class TTFAutohint(AutohintBase):
    """
    The `TtfAutohinter` provides an interface to the installed ttfAutohint. Usage:

    ttfAutohint [OPTION] IN-FILE OUT-FILE

    Replace hints in TrueType font IN-FILE and write output to OUT-FILE. The new hints are based on FreeType's auto-
    hinter. This program is a simple front-end to the `ttfAutohint' library.

    Options:
        -f, --latin-fallback         set fallback script to latin
        -h, --help                     display this help and exit
        -i, --ignore-permissions     override font license restrictions
        -l, --hinting-range-min=N    the minimum ppem value for generating hints
        -p, --pre-hinting            apply original hints before generating hints
        -r, --hinting-range-max=N    the maximum ppem value for generating hints
        -v, --verbose                show progress information
        -V, --version                print(version information and exit)
        -x, --x-height-snapping-exceptions=STRING
                                    specify a comma-separated list of x-height
                                    snapping exceptions ranges and single values

    The program accepts both TTF and TTC files as input. The `gasp' table of OUT-FILE enables grayscale hinting for all
    sizes. Use option -i only if you have a legal permission to modify the font. If option -f is not set, glyphs not in
    the Latin range stay unhinted. The used ppem value for option -p is FUnits per em, normally 2048.

    Report bugs to: freetype-devel@nongnu.org
    FreeType home page: <http://www.freetype.org>
    XierpaPlace:ttfAutohint petr$
    """

    C = Constants

    # CVT values that always seem to be there when generated by TTFAutohint
    DEFAULT_CVT = {
        0: 'cvtName000', # ?
        1: 'cvtName001', # ?
        2: 'cvtName001', # ?
        3: 'cvtName001', # ?
        4: 'cvtName001', # ?
        5: 'cvtName001', # ?
        6: 'cvtName001', # ?
        7: 'cvtName001', # ?
        8: 'cvtName001', # ?
        9: 'cvtName001', # ?
        10: 'cvtName001', # ?
        11: 'capheight', # ?
        12: 'cvtName001', # ?
        13: 'ascender', # ?
        14: 'cvtName001', # ?
        15: 'cvtName001', # ?
        16: 'descenderOS', # ?
        17: 'capheightOS', # ?
        18: 'baselineOS', # ?
        19: 'ascender', # ?
        20: 'xheightOS', # ?
        21: 'baselineOS', # ?
        22: 'descenderOS', # ?
    }

    @classmethod
    def autohint(cls, srcPath, hintPath=None, ppemmin=None, ppemmax=None, prehinting=False, heights=None, verbose=False):
        """
        The `hint` method saves the `self.font` to a temporary TTF font, runs the
        ttfautohinter on it, reads the resulting ttf font and copies the generatedhinting tables into the the original
        `self.font`.
        """
        hintPath = hintPath or cls.path2HintPath(srcPath)

        try:
            os.remove(hintPath) # Delete the auto-hinted file, if it exists.
        except OSError:
            pass

        # Now we have a font there, apply the auto-hinter on it.
        cmd = ['ttfAutohint']
        cmd.append('--hinting-range-min=%d' % (ppemmin or cls.C.PPEM_MIN))
        cmd.append('--hinting-range-max=%d' % (ppemmax or cls.C.PPEM_MAX))
        if prehinting:
            cmd.append('--pre-hinting')

        # Progress feedback.
        if verbose:
            cmd.append('--verbose')

        cmd.append('--ignore-permissions')

        # If any heights defined, add them to the command.
        if heights:
            cmd.append('--x-height-snapping-exceptions=%s' % TX.list2CommaString(heights))
        cmd.append('"%s" "%s"' % (srcPath, hintPath))
        cmd = ' '.join(cmd)
        print('=====',  cmd)
        os.system(cmd)

        '''
        Answers the output path if it was possible to generate the font and
        retrieve the hints. Else answers None if it was not possible to generate the
        font.
        '''
        if os.path.exists(hintPath):
            return hintPath

        return None # Could not generate the hinted output font.

if __name__ == "__main__":
    # Test imports
    #path = '/FontDevelopment/Monocode/2012-10-02/MonocodeRegular.ttf'
    path = '/FontDevelopment/_TTF/Georgia.ttf'
    hintPath = '/FontDevelopment/_TTF/Georgia-Hinted.ttf'
    print(TTFAutohint.autohint(path, hintPath))
